// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package token

import (
	"fmt"
	"io"

	address "github.com/filecoin-project/go-address"
	big "github.com/filecoin-project/go-state-types/big"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf

var lengthBufState = []byte{133}

func (t *State) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufState); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Nonce (big.Int) (struct)
	if err := t.Nonce.MarshalCBOR(w); err != nil {
		return err
	}

	// t.URIs (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.URIs); err != nil {
		return xerrors.Errorf("failed to write cid field t.URIs: %w", err)
	}

	// t.Creators (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.Creators); err != nil {
		return xerrors.Errorf("failed to write cid field t.Creators: %w", err)
	}

	// t.Balances (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.Balances); err != nil {
		return xerrors.Errorf("failed to write cid field t.Balances: %w", err)
	}

	// t.Approves (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.Approves); err != nil {
		return xerrors.Errorf("failed to write cid field t.Approves: %w", err)
	}

	return nil
}

func (t *State) UnmarshalCBOR(r io.Reader) error {
	*t = State{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 5 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Nonce (big.Int) (struct)

	{

		if err := t.Nonce.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Nonce: %w", err)
		}

	}
	// t.URIs (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.URIs: %w", err)
		}

		t.URIs = c

	}
	// t.Creators (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.Creators: %w", err)
		}

		t.Creators = c

	}
	// t.Balances (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.Balances: %w", err)
		}

		t.Balances = c

	}
	// t.Approves (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.Approves: %w", err)
		}

		t.Approves = c

	}
	return nil
}

var lengthBufAddrTokenAmountMap = []byte{129}

func (t *AddrTokenAmountMap) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufAddrTokenAmountMap); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.AddrTokenAmountMap (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.AddrTokenAmountMap); err != nil {
		return xerrors.Errorf("failed to write cid field t.AddrTokenAmountMap: %w", err)
	}

	return nil
}

func (t *AddrTokenAmountMap) UnmarshalCBOR(r io.Reader) error {
	*t = AddrTokenAmountMap{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.AddrTokenAmountMap (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.AddrTokenAmountMap: %w", err)
		}

		t.AddrTokenAmountMap = c

	}
	return nil
}

var lengthBufAddrApproveMap = []byte{129}

func (t *AddrApproveMap) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufAddrApproveMap); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.AddrApproveMap (cid.Cid) (struct)

	if err := cbg.WriteCidBuf(scratch, w, t.AddrApproveMap); err != nil {
		return xerrors.Errorf("failed to write cid field t.AddrApproveMap: %w", err)
	}

	return nil
}

func (t *AddrApproveMap) UnmarshalCBOR(r io.Reader) error {
	*t = AddrApproveMap{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.AddrApproveMap (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(br)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.AddrApproveMap: %w", err)
		}

		t.AddrApproveMap = c

	}
	return nil
}

var lengthBufTokenURI = []byte{129}

func (t *TokenURI) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufTokenURI); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.TokenURI (string) (string)
	if len(t.TokenURI) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.TokenURI was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.TokenURI))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.TokenURI)); err != nil {
		return err
	}
	return nil
}

func (t *TokenURI) UnmarshalCBOR(r io.Reader) error {
	*t = TokenURI{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.TokenURI (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.TokenURI = string(sval)
	}
	return nil
}

var lengthBufCreateTokenParams = []byte{130}

func (t *CreateTokenParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufCreateTokenParams); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.ValueInit (big.Int) (struct)
	if err := t.ValueInit.MarshalCBOR(w); err != nil {
		return err
	}

	// t.TokenURI (string) (string)
	if len(t.TokenURI) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.TokenURI was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.TokenURI))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.TokenURI)); err != nil {
		return err
	}
	return nil
}

func (t *CreateTokenParams) UnmarshalCBOR(r io.Reader) error {
	*t = CreateTokenParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.ValueInit (big.Int) (struct)

	{

		if err := t.ValueInit.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.ValueInit: %w", err)
		}

	}
	// t.TokenURI (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.TokenURI = string(sval)
	}
	return nil
}

var lengthBufMintBatchTokenParams = []byte{131}

func (t *MintBatchTokenParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufMintBatchTokenParams); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.TokenID (big.Int) (struct)
	if err := t.TokenID.MarshalCBOR(w); err != nil {
		return err
	}

	// t.AddrTos ([]address.Address) (slice)
	if len(t.AddrTos) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.AddrTos was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.AddrTos))); err != nil {
		return err
	}
	for _, v := range t.AddrTos {
		if err := v.MarshalCBOR(w); err != nil {
			return err
		}
	}

	// t.Values ([]big.Int) (slice)
	if len(t.Values) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Values was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Values))); err != nil {
		return err
	}
	for _, v := range t.Values {
		if err := v.MarshalCBOR(w); err != nil {
			return err
		}
	}
	return nil
}

func (t *MintBatchTokenParams) UnmarshalCBOR(r io.Reader) error {
	*t = MintBatchTokenParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.TokenID (big.Int) (struct)

	{

		if err := t.TokenID.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.TokenID: %w", err)
		}

	}
	// t.AddrTos ([]address.Address) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.AddrTos: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.AddrTos = make([]address.Address, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v address.Address
		if err := v.UnmarshalCBOR(br); err != nil {
			return err
		}

		t.AddrTos[i] = v
	}

	// t.Values ([]big.Int) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Values: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Values = make([]big.Int, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v big.Int
		if err := v.UnmarshalCBOR(br); err != nil {
			return err
		}

		t.Values[i] = v
	}

	return nil
}

var lengthBufBalanceOfParams = []byte{130}

func (t *BalanceOfParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufBalanceOfParams); err != nil {
		return err
	}

	// t.AddrOwner (address.Address) (struct)
	if err := t.AddrOwner.MarshalCBOR(w); err != nil {
		return err
	}

	// t.TokenID (big.Int) (struct)
	if err := t.TokenID.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *BalanceOfParams) UnmarshalCBOR(r io.Reader) error {
	*t = BalanceOfParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.AddrOwner (address.Address) (struct)

	{

		if err := t.AddrOwner.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.AddrOwner: %w", err)
		}

	}
	// t.TokenID (big.Int) (struct)

	{

		if err := t.TokenID.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.TokenID: %w", err)
		}

	}
	return nil
}

var lengthBufBalanceOfResults = []byte{129}

func (t *BalanceOfResults) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufBalanceOfResults); err != nil {
		return err
	}

	// t.Balance (big.Int) (struct)
	if err := t.Balance.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *BalanceOfResults) UnmarshalCBOR(r io.Reader) error {
	*t = BalanceOfResults{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Balance (big.Int) (struct)

	{

		if err := t.Balance.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Balance: %w", err)
		}

	}
	return nil
}

var lengthBufBalanceOfBatchParams = []byte{130}

func (t *BalanceOfBatchParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufBalanceOfBatchParams); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.AddrOwners ([]address.Address) (slice)
	if len(t.AddrOwners) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.AddrOwners was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.AddrOwners))); err != nil {
		return err
	}
	for _, v := range t.AddrOwners {
		if err := v.MarshalCBOR(w); err != nil {
			return err
		}
	}

	// t.TokenIDs ([]big.Int) (slice)
	if len(t.TokenIDs) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.TokenIDs was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.TokenIDs))); err != nil {
		return err
	}
	for _, v := range t.TokenIDs {
		if err := v.MarshalCBOR(w); err != nil {
			return err
		}
	}
	return nil
}

func (t *BalanceOfBatchParams) UnmarshalCBOR(r io.Reader) error {
	*t = BalanceOfBatchParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.AddrOwners ([]address.Address) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.AddrOwners: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.AddrOwners = make([]address.Address, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v address.Address
		if err := v.UnmarshalCBOR(br); err != nil {
			return err
		}

		t.AddrOwners[i] = v
	}

	// t.TokenIDs ([]big.Int) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.TokenIDs: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.TokenIDs = make([]big.Int, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v big.Int
		if err := v.UnmarshalCBOR(br); err != nil {
			return err
		}

		t.TokenIDs[i] = v
	}

	return nil
}

var lengthBufBalanceOfBatchResults = []byte{129}

func (t *BalanceOfBatchResults) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufBalanceOfBatchResults); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Balances ([]big.Int) (slice)
	if len(t.Balances) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Balances was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Balances))); err != nil {
		return err
	}
	for _, v := range t.Balances {
		if err := v.MarshalCBOR(w); err != nil {
			return err
		}
	}
	return nil
}

func (t *BalanceOfBatchResults) UnmarshalCBOR(r io.Reader) error {
	*t = BalanceOfBatchResults{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Balances ([]big.Int) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Balances: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Balances = make([]big.Int, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v big.Int
		if err := v.UnmarshalCBOR(br); err != nil {
			return err
		}

		t.Balances[i] = v
	}

	return nil
}

var lengthBufGetURIParams = []byte{129}

func (t *GetURIParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufGetURIParams); err != nil {
		return err
	}

	// t.TokenID (big.Int) (struct)
	if err := t.TokenID.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *GetURIParams) UnmarshalCBOR(r io.Reader) error {
	*t = GetURIParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.TokenID (big.Int) (struct)

	{

		if err := t.TokenID.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.TokenID: %w", err)
		}

	}
	return nil
}

var lengthBufChangeURIParams = []byte{130}

func (t *ChangeURIParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufChangeURIParams); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.NewURI (string) (string)
	if len(t.NewURI) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.NewURI was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.NewURI))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.NewURI)); err != nil {
		return err
	}

	// t.TokenID (big.Int) (struct)
	if err := t.TokenID.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *ChangeURIParams) UnmarshalCBOR(r io.Reader) error {
	*t = ChangeURIParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.NewURI (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.NewURI = string(sval)
	}
	// t.TokenID (big.Int) (struct)

	{

		if err := t.TokenID.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.TokenID: %w", err)
		}

	}
	return nil
}

var lengthBufSafeTransferFromParams = []byte{132}

func (t *SafeTransferFromParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufSafeTransferFromParams); err != nil {
		return err
	}

	// t.AddrFrom (address.Address) (struct)
	if err := t.AddrFrom.MarshalCBOR(w); err != nil {
		return err
	}

	// t.AddrTo (address.Address) (struct)
	if err := t.AddrTo.MarshalCBOR(w); err != nil {
		return err
	}

	// t.TokenID (big.Int) (struct)
	if err := t.TokenID.MarshalCBOR(w); err != nil {
		return err
	}

	// t.Value (big.Int) (struct)
	if err := t.Value.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *SafeTransferFromParams) UnmarshalCBOR(r io.Reader) error {
	*t = SafeTransferFromParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 4 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.AddrFrom (address.Address) (struct)

	{

		if err := t.AddrFrom.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.AddrFrom: %w", err)
		}

	}
	// t.AddrTo (address.Address) (struct)

	{

		if err := t.AddrTo.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.AddrTo: %w", err)
		}

	}
	// t.TokenID (big.Int) (struct)

	{

		if err := t.TokenID.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.TokenID: %w", err)
		}

	}
	// t.Value (big.Int) (struct)

	{

		if err := t.Value.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Value: %w", err)
		}

	}
	return nil
}

var lengthBufSafeBatchTransferFromParams = []byte{132}

func (t *SafeBatchTransferFromParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufSafeBatchTransferFromParams); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.AddrFrom (address.Address) (struct)
	if err := t.AddrFrom.MarshalCBOR(w); err != nil {
		return err
	}

	// t.AddrTo (address.Address) (struct)
	if err := t.AddrTo.MarshalCBOR(w); err != nil {
		return err
	}

	// t.TokenIDs ([]big.Int) (slice)
	if len(t.TokenIDs) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.TokenIDs was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.TokenIDs))); err != nil {
		return err
	}
	for _, v := range t.TokenIDs {
		if err := v.MarshalCBOR(w); err != nil {
			return err
		}
	}

	// t.Values ([]big.Int) (slice)
	if len(t.Values) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Values was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Values))); err != nil {
		return err
	}
	for _, v := range t.Values {
		if err := v.MarshalCBOR(w); err != nil {
			return err
		}
	}
	return nil
}

func (t *SafeBatchTransferFromParams) UnmarshalCBOR(r io.Reader) error {
	*t = SafeBatchTransferFromParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 4 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.AddrFrom (address.Address) (struct)

	{

		if err := t.AddrFrom.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.AddrFrom: %w", err)
		}

	}
	// t.AddrTo (address.Address) (struct)

	{

		if err := t.AddrTo.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.AddrTo: %w", err)
		}

	}
	// t.TokenIDs ([]big.Int) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.TokenIDs: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.TokenIDs = make([]big.Int, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v big.Int
		if err := v.UnmarshalCBOR(br); err != nil {
			return err
		}

		t.TokenIDs[i] = v
	}

	// t.Values ([]big.Int) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Values: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Values = make([]big.Int, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v big.Int
		if err := v.UnmarshalCBOR(br); err != nil {
			return err
		}

		t.Values[i] = v
	}

	return nil
}

var lengthBufSetApproveForAllParams = []byte{130}

func (t *SetApproveForAllParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufSetApproveForAllParams); err != nil {
		return err
	}

	// t.AddrTo (address.Address) (struct)
	if err := t.AddrTo.MarshalCBOR(w); err != nil {
		return err
	}

	// t.Approved (bool) (bool)
	if err := cbg.WriteBool(w, t.Approved); err != nil {
		return err
	}
	return nil
}

func (t *SetApproveForAllParams) UnmarshalCBOR(r io.Reader) error {
	*t = SetApproveForAllParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.AddrTo (address.Address) (struct)

	{

		if err := t.AddrTo.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.AddrTo: %w", err)
		}

	}
	// t.Approved (bool) (bool)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajOther {
		return fmt.Errorf("booleans must be major type 7")
	}
	switch extra {
	case 20:
		t.Approved = false
	case 21:
		t.Approved = true
	default:
		return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
	}
	return nil
}

var lengthBufIsApproveForAllParams = []byte{130}

func (t *IsApproveForAllParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufIsApproveForAllParams); err != nil {
		return err
	}

	// t.AddrFrom (address.Address) (struct)
	if err := t.AddrFrom.MarshalCBOR(w); err != nil {
		return err
	}

	// t.AddrTo (address.Address) (struct)
	if err := t.AddrTo.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *IsApproveForAllParams) UnmarshalCBOR(r io.Reader) error {
	*t = IsApproveForAllParams{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.AddrFrom (address.Address) (struct)

	{

		if err := t.AddrFrom.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.AddrFrom: %w", err)
		}

	}
	// t.AddrTo (address.Address) (struct)

	{

		if err := t.AddrTo.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.AddrTo: %w", err)
		}

	}
	return nil
}

var lengthBufIsApprovedForAllResults = []byte{129}

func (t *IsApprovedForAllResults) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufIsApprovedForAllResults); err != nil {
		return err
	}

	// t.IsApproved (bool) (bool)
	if err := cbg.WriteBool(w, t.IsApproved); err != nil {
		return err
	}
	return nil
}

func (t *IsApprovedForAllResults) UnmarshalCBOR(r io.Reader) error {
	*t = IsApprovedForAllResults{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.IsApproved (bool) (bool)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajOther {
		return fmt.Errorf("booleans must be major type 7")
	}
	switch extra {
	case 20:
		t.IsApproved = false
	case 21:
		t.IsApproved = true
	default:
		return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
	}
	return nil
}
